// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"
#include <WPILib.h>
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::mobilityFLspeedController;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityRLspeedController;
std::shared_ptr<WPI_TalonSRX> RobotMap::mobilityfrontLeftMotor;
std::shared_ptr<WPI_TalonSRX> RobotMap::mobilityrearLeftMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::mobilityleftSpeedController;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityFRspeedController;
std::shared_ptr<frc::SpeedController> RobotMap::mobilityRRspeedController;
std::shared_ptr<WPI_TalonSRX> RobotMap::mobilityfrontRightMotor;
std::shared_ptr<WPI_TalonSRX> RobotMap::mobilityrearRightMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::mobilityrightSpeedController;
std::shared_ptr<frc::DifferentialDrive> RobotMap::mobilityDifferentialDrive1;
std::shared_ptr<frc::Encoder> RobotMap::mobilityleftEncoder;
std::shared_ptr<frc::Encoder> RobotMap::mobilityrightEncoder;

std::shared_ptr<WPI_TalonSRX> RobotMap::liftelevatorMotor;
std::shared_ptr<frc::SpeedController> RobotMap::liftelevatorSpeedController;
std::shared_ptr<frc::DigitalInput> RobotMap::lifttopLS;
std::shared_ptr<frc::DigitalInput> RobotMap::liftbottomLS;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::liftStringPot;

std::shared_ptr<frc::Solenoid> RobotMap::armsxAxisSolenoid;
std::shared_ptr<frc::Solenoid> RobotMap::armsyAxisSolenoid;

std::shared_ptr<frc::Solenoid> RobotMap::rungbackBarSolenoid;

std::shared_ptr<frc::SpeedController> RobotMap::climberclimberSpeedController;
std::shared_ptr<WPI_TalonSRX> RobotMap::climberclimberMotor;
std::shared_ptr<frc::AnalogPotentiometer> RobotMap::climberstringPot;
std::shared_ptr<frc::DigitalInput> RobotMap::climberLimitSwitch1;
std::shared_ptr<frc::DigitalInput> RobotMap::climberLimitSwitch2;

std::shared_ptr<frc::DigitalOutput> RobotMap::lEDLightsLED;

std::shared_ptr<WPI_TalonSRX> RobotMap::conveyorBeltsleftConveyorBelt;
std::shared_ptr<WPI_TalonSRX> RobotMap::conveyorBeltsrightConveyorBelt;
std::shared_ptr<frc::DifferentialDrive> RobotMap::conveyorBeltsConveyorDrive;
std::shared_ptr<frc::DigitalInput> RobotMap::conveyorBeltsLimitSwitch1;
std::shared_ptr<frc::DigitalInput> RobotMap::conveyorBeltsLimitSwitch2;
std::shared_ptr<WPI_TalonSRX> RobotMap::conveyorBeltsTalonSRX1;
std::shared_ptr<WPI_TalonSRX> RobotMap::conveyorBeltsTalonSRX2;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    mobilityFLspeedController.reset(new frc::PWMTalonSRX(1));
    lw->AddActuator("Mobility", "FLspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityFLspeedController));
    
    mobilityRLspeedController.reset(new frc::PWMTalonSRX(2));
    lw->AddActuator("Mobility", "RLspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityRLspeedController));
    
    mobilityfrontLeftMotor.reset(new WPI_TalonSRX(0));
    
    
    mobilityrearLeftMotor.reset(new WPI_TalonSRX(1));
    
    
    mobilityleftSpeedController = std::make_shared<frc::SpeedControllerGroup>(*mobilityFLspeedController, *mobilityRLspeedController  );
    lw->AddActuator("Mobility", "leftSpeedController", mobilityleftSpeedController);
    
    mobilityFRspeedController.reset(new frc::PWMTalonSRX(8));
    lw->AddActuator("Mobility", "FRspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityFRspeedController));
    
    mobilityRRspeedController.reset(new frc::PWMTalonSRX(7));
    lw->AddActuator("Mobility", "RRspeedController", std::static_pointer_cast<frc::PWMTalonSRX>(mobilityRRspeedController));
    
    mobilityfrontRightMotor.reset(new WPI_TalonSRX(2));
    
    
    mobilityrearRightMotor.reset(new WPI_TalonSRX(3));
    
    
    mobilityrightSpeedController = std::make_shared<frc::SpeedControllerGroup>(*mobilityFRspeedController, *mobilityRRspeedController  );
    lw->AddActuator("Mobility", "rightSpeedController", mobilityrightSpeedController);
    
    mobilityDifferentialDrive1.reset(new frc::DifferentialDrive(*mobilityleftSpeedController, *mobilityrightSpeedController));
    lw->AddActuator("Mobility", "Differential Drive 1", mobilityDifferentialDrive1);
    mobilityDifferentialDrive1->SetSafetyEnabled(true);
        mobilityDifferentialDrive1->SetExpiration(0.1);
        mobilityDifferentialDrive1->SetMaxOutput(1.0);

    mobilityleftEncoder.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("Mobility", "leftEncoder", mobilityleftEncoder);
    mobilityleftEncoder->SetDistancePerPulse(1.0);
    mobilityleftEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    mobilityrightEncoder.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    lw->AddSensor("Mobility", "rightEncoder", mobilityrightEncoder);
    mobilityrightEncoder->SetDistancePerPulse(1.0);
    mobilityrightEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    liftelevatorMotor.reset(new WPI_TalonSRX(6));
    
    
    liftelevatorSpeedController.reset(new frc::PWMTalonSRX(3));
    lw->AddActuator("Lift", "elevatorSpeedController", std::static_pointer_cast<frc::PWMTalonSRX>(liftelevatorSpeedController));
    
    lifttopLS.reset(new frc::DigitalInput(4));
    lw->AddSensor("Lift", "topLS", lifttopLS);
    
    liftbottomLS.reset(new frc::DigitalInput(5));
    lw->AddSensor("Lift", "bottomLS", liftbottomLS);
    
    liftStringPot.reset(new frc::AnalogPotentiometer(0, 1.0, 0.0));
    lw->AddSensor("Lift", "String Pot", liftStringPot);
    
    armsxAxisSolenoid.reset(new frc::Solenoid(0, 0));
    lw->AddActuator("Arms", "xAxisSolenoid", armsxAxisSolenoid);
    
    armsyAxisSolenoid.reset(new frc::Solenoid(0, 1));
    lw->AddActuator("Arms", "yAxisSolenoid", armsyAxisSolenoid);
    
    rungbackBarSolenoid.reset(new frc::Solenoid(0, 4));
    lw->AddActuator("Rung", "backBarSolenoid", rungbackBarSolenoid);
    
    climberclimberSpeedController.reset(new frc::PWMTalonSRX(9));
    lw->AddActuator("Climber", "climberSpeedController", std::static_pointer_cast<frc::PWMTalonSRX>(climberclimberSpeedController));
    
    climberclimberMotor.reset(new WPI_TalonSRX(7));
    
    
    climberstringPot.reset(new frc::AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("Climber", "stringPot", climberstringPot);
    
    climberLimitSwitch1.reset(new frc::DigitalInput(9));
    lw->AddSensor("Climber", "Limit Switch 1", climberLimitSwitch1);
    
    climberLimitSwitch2.reset(new frc::DigitalInput(10));
    lw->AddSensor("Climber", "Limit Switch 2", climberLimitSwitch2);
    
    lEDLightsLED.reset(new frc::DigitalOutput(8));
    lw->AddActuator("LEDLights", "LED", lEDLightsLED);
    
    conveyorBeltsleftConveyorBelt.reset(new WPI_TalonSRX(9));
    
    
    conveyorBeltsrightConveyorBelt.reset(new WPI_TalonSRX(10));
    
    
    conveyorBeltsConveyorDrive.reset(new frc::DifferentialDrive(*conveyorBeltsleftConveyorBelt, *conveyorBeltsrightConveyorBelt));
    lw->AddActuator("ConveyorBelts", "ConveyorDrive", conveyorBeltsConveyorDrive);
    conveyorBeltsConveyorDrive->SetSafetyEnabled(true);
        conveyorBeltsConveyorDrive->SetExpiration(0.1);
        conveyorBeltsConveyorDrive->SetMaxOutput(1.0);

    conveyorBeltsLimitSwitch1.reset(new frc::DigitalInput(7));
    lw->AddSensor("ConveyorBelts", "Limit Switch 1", conveyorBeltsLimitSwitch1);
    
    conveyorBeltsLimitSwitch2.reset(new frc::DigitalInput(12));
    lw->AddSensor("ConveyorBelts", "Limit Switch 2", conveyorBeltsLimitSwitch2);
    
    conveyorBeltsTalonSRX1.reset(new WPI_TalonSRX(11));
    
    
    conveyorBeltsTalonSRX2.reset(new WPI_TalonSRX(12));
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
